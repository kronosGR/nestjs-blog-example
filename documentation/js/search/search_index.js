var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.784,1,3.06,2,1.457,3,0.528,4,0.454,5,0.454,6,3.32,7,0.646,8,0.039,9,0.967,10,2.628,11,3.32,12,0.528,13,0.026,14,2.22,15,1.787,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,0.98,19,1.858]],["body/modules/AppModule.html",[1,2.835,2,1.449,3,0.383,4,0.33,5,0.33,7,0.696,8,0.039,9,0.702,10,2.621,11,2.41,12,0.383,13,0.019,16,0.026,17,0.026,18,1.494,19,3.591,20,1.297,21,1.297,22,1.612,23,1.612,24,1.297,25,2.517,26,1.612,27,2.41,28,2.41,29,2.41,30,2.621,31,2.928,32,2.358,33,2.207,34,1.612,35,1.442,36,2.928,37,2.485,38,2.928,39,2.928,40,2.928,41,2.928]],["title/injectables/AppService.html",[10,1.477,42,1.083]],["body/injectables/AppService.html",[3,0.506,4,0.436,5,0.436,7,0.506,8,0.038,9,0.928,10,2.37,12,0.506,13,0.025,16,0.031,17,0.031,42,1.738,43,2.13,44,3.185,45,0.832,46,2.37,47,5.477,48,1.142,49,3.868,50,1.906,51,1.738,52,1.906,53,3.868,54,3.868]],["title/controllers/AuthController.html",[0,1.083,55,1.858]],["body/controllers/AuthController.html",[0,1.442,2,1.442,3,0.522,4,0.449,5,0.449,7,0.641,8,0.039,9,0.957,12,0.522,13,0.026,14,2.197,15,1.769,16,0.032,17,0.032,55,3.04,56,3.285,57,2.821,58,3.991,59,2.353,60,3.285,61,3.991]],["title/modules/AuthModule.html",[18,0.98,30,1.477]],["body/modules/AuthModule.html",[2,1.517,3,0.41,4,0.353,5,0.353,7,0.662,8,0.039,9,0.751,12,0.41,13,0.02,16,0.027,17,0.027,18,1.547,20,1.389,21,1.389,22,1.725,23,1.725,24,1.389,25,2.606,26,2.606,30,2.731,32,1.86,33,2.311,34,1.725,35,1.544,37,1.942,55,2.935,59,2.595,60,2.58,62,2.58,63,2.58,64,2.58,65,3.133,66,2.602,67,3.133,68,2.58,69,2.58,70,2.58,71,2.58]],["title/injectables/AuthService.html",[42,1.083,59,1.329]],["body/injectables/AuthService.html",[3,0.366,4,0.315,5,0.315,7,0.508,8,0.039,9,0.671,12,0.366,13,0.018,15,1.24,16,0.025,17,0.025,18,0.914,42,1.404,43,1.54,45,0.602,46,1.915,48,1.318,50,1.915,51,2.039,52,1.915,59,1.722,66,2.409,72,2.304,73,2.888,74,3.972,75,3.886,76,2.747,77,2.304,78,2.152,79,2.798,80,2.139,81,2.139,82,1.148,83,1.554,84,2.798,85,2.798,86,3.886,87,3.676,88,2.458,89,2.798,90,1.978,91,2.304,92,2.304,93,2.304,94,2.798,95,2.304,96,1.978,97,1.978,98,2.798,99,2.798,100,2.304]],["title/classes/CreatePostDto.html",[13,0.019,101,1.65]],["body/classes/CreatePostDto.html",[3,0.162,4,0.14,5,0.14,7,0.493,8,0.039,12,0.162,13,0.017,16,0.013,17,0.013,45,0.267,48,1.329,51,1.744,82,1.527,83,1.799,100,2.866,101,1.142,102,0.549,103,3.268,104,0.876,105,1.185,106,3.452,107,2.675,108,2.675,109,3.452,110,2.675,111,2.675,112,3.482,113,1.891,114,3.482,115,2.866,116,1.994,117,3.482,118,3.363,119,1.239,120,1.239,121,2.074,122,2.074,123,3.999,124,1.239,125,1.239,126,1.939,127,1.239,128,3.128,129,1.708,130,1.708,131,2.074,132,1.239,133,1.239,134,1.239,135,2.074,136,2.377,137,2.575,138,3.128,139,1.858,140,1.286,141,2.074,142,1.239,143,1.239,144,3.128,145,1.708,146,2.074,147,2.074,148,1.239,149,1.239,150,2.074,151,2.074,152,2.074,153,1.239,154,1.239,155,1.239,156,1.239,157,1.708,158,1.239,159,3.128,160,3.128,161,1.708,162,2.074,163,2.074,164,2.074,165,2.074,166,2.074,167,1.239,168,2.866,169,1.708,170,1.708,171,2.074,172,1.239,173,1.239,174,1.239,175,1.239,176,3.128,177,1.239,178,2.074,179,1.239,180,1.239,181,2.675,182,1.239,183,2.074,184,2.074,185,2.158,186,2.827,187,2.461,188,2.074,189,1.02,190,1.02,191,2.074,192,0.611,193,1.239,194,1.239,195,0.768,196,1.891,197,1.239,198,0.876,199,2.866,200,3.999,201,0.682,202,1.239,203,2.074,204,1.239,205,1.239,206,1.239,207,1.239,208,1.239,209,1.239,210,1.239,211,1.239,212,1.02,213,1.02,214,1.02,215,1.239,216,1.466,217,1.239,218,1.466]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,126,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.459,4,0.395,5,0.395,7,0.459,8,0.038,12,0.459,13,0.029,16,0.029,17,0.029,45,0.755,48,1.336,51,1.635,82,1.336,102,1.556,103,3.538,105,2.005,116,2.005,126,2.804,139,2.218,185,3.277,187,3.197,192,1.73,196,3.538,216,3.538,218,3.538,219,2.89,220,3.51,221,3.51,222,3.51]],["title/classes/CreateUserDto.html",[13,0.019,223,1.65]],["body/classes/CreateUserDto.html",[3,0.34,4,0.292,5,0.292,7,0.34,8,0.038,12,0.34,13,0.024,16,0.024,17,0.024,45,0.559,48,1.378,51,1.946,82,1.378,83,1.475,87,3.53,90,3.031,102,1.151,105,1.634,116,2.069,161,3.036,185,2.894,186,2.607,187,3.3,189,2.138,190,2.138,192,1.279,214,3.036,223,2.03,224,4.059,225,1.836,226,3.53,227,4.288,228,2.597,229,2.597,230,2.597,231,2.597,232,2.597,233,2.597,234,2.597,235,4.668,236,3.688,237,3.688,238,3.688,239,3.688,240,3.688,241,5.122,242,3.688,243,2.03,244,3.688,245,3.688,246,2.597,247,3.688,248,2.597,249,3.688,250,2.597,251,2.597,252,2.597,253,2.597,254,2.138]],["title/classes/GetUsersParamDto.html",[13,0.019,255,1.65]],["body/classes/GetUsersParamDto.html",[3,0.47,4,0.405,5,0.405,7,0.601,8,0.038,12,0.47,13,0.033,16,0.03,17,0.03,45,0.773,48,1.061,82,1.494,83,1.836,88,2.786,102,1.593,105,2.035,116,1.593,186,3.246,192,1.77,198,2.54,243,2.786,255,2.528,256,3.78,257,2.528,258,2.958,259,3.594,260,3.594,261,3.78]],["title/classes/PatchPostDto.html",[13,0.019,262,1.858]],["body/classes/PatchPostDto.html",[3,0.441,4,0.379,5,0.379,7,0.642,8,0.038,12,0.441,13,0.028,16,0.028,17,0.028,45,0.725,48,0.995,82,0.995,88,2.973,101,1.855,102,1.493,104,2.382,105,1.952,116,1.493,118,2.731,136,1.66,139,1.952,157,2.774,185,2.731,192,1.66,195,2.089,199,3.627,201,1.855,243,2.425,261,3.627,262,2.731,263,3.627,264,3.627,265,4.405,266,3.37,267,3.37,268,2.774,269,2.774,270,2.382]],["title/classes/PatchUserDto.html",[13,0.019,271,1.858]],["body/classes/PatchUserDto.html",[3,0.528,4,0.454,5,0.454,7,0.646,8,0.038,12,0.528,13,0.026,16,0.032,17,0.032,102,1.787,195,2.5,223,2.22,225,2.851,264,4.063,268,3.32,271,3.06,272,3.32,273,4.936,274,3.32,275,3.32,276,3.32]],["title/controllers/PostsController.html",[0,1.083,277,1.858]],["body/controllers/PostsController.html",[0,0.783,2,0.783,3,0.283,4,0.244,5,0.244,7,0.6,8,0.039,9,0.52,12,0.283,13,0.014,14,1.193,15,0.96,16,0.021,17,0.021,45,0.466,46,1.592,48,1.141,50,1.905,51,1.397,52,1.067,57,1.531,73,2.881,80,2.128,81,2.128,82,1.141,83,1.714,101,2.742,113,2.285,116,1.713,136,2.111,139,1.899,195,2.004,201,1.193,262,2.657,269,2.661,277,2.004,278,1.784,279,2.167,280,3.232,281,3.232,282,3.232,283,2.167,284,3.232,285,2.285,286,3.232,287,3.232,288,4.286,289,4.286,290,2.167,291,2.167,292,3.232,293,2.167,294,3.232,295,2.167,296,2.661,297,2.167,298,3.232,299,3.232,300,2.167,301,2.167,302,3.866,303,1.784,304,1.784,305,2.661,306,1.905,307,1.784,308,3.182,309,3.182,310,1.784,311,1.784,312,1.784,313,2.167,314,2.167,315,2.167,316,2.167,317,2.661,318,2.167,319,2.167,320,2.167,321,2.167,322,2.167,323,2.167]],["title/modules/PostsModule.html",[18,0.98,31,1.65]],["body/modules/PostsModule.html",[2,1.556,3,0.426,4,0.366,5,0.366,7,0.672,8,0.038,9,0.78,12,0.426,13,0.021,16,0.028,17,0.028,18,1.577,20,1.442,21,1.442,22,1.791,23,1.791,24,1.442,25,2.656,26,1.791,31,3.127,32,2.431,33,2.37,34,1.791,35,1.603,37,2.669,68,2.679,277,2.991,306,2.703,307,2.679,324,2.679,325,3.254,326,2.679,327,3.254,328,3.254]],["title/injectables/PostsService.html",[42,1.083,306,1.477]],["body/injectables/PostsService.html",[3,0.389,4,0.335,5,0.335,7,0.53,8,0.039,9,0.713,12,0.389,13,0.019,14,1.637,15,1.318,16,0.026,17,0.026,42,1.464,43,1.637,45,0.64,46,1.996,48,1.197,50,1.465,51,1.666,52,1.465,73,2.537,76,2.102,77,2.448,78,2.137,80,2.231,81,2.231,82,1.197,83,1.62,92,2.448,96,2.102,97,3.258,106,4.075,115,3.336,257,2.231,296,2.448,306,1.996,329,2.448,330,3.336,331,2.974,332,4.052,333,2.974,334,2.974,335,4.075,336,4.052,337,3.336]],["title/controllers/UsersController.html",[0,1.083,338,1.858]],["body/controllers/UsersController.html",[0,0.571,2,0.571,3,0.207,4,0.178,5,0.178,7,0.553,8,0.039,9,0.379,12,0.207,13,0.01,14,0.87,15,0.7,16,0.016,17,0.016,45,0.34,46,1.247,48,0.935,50,1.56,51,0.571,52,2.083,57,1.117,73,2.687,78,1.266,80,1.743,81,2.327,82,1.405,83,1.584,88,2.444,97,2.559,113,1.117,116,1.403,118,2.621,129,3.48,130,3.48,136,2.405,139,1.403,140,2.95,201,0.87,223,2.327,243,2.878,255,2.327,257,2.687,270,1.789,271,2.86,276,2.084,285,2.238,303,1.301,304,1.301,305,2.607,308,2.084,309,2.084,310,1.301,311,1.301,312,1.301,317,1.301,338,1.569,339,1.301,340,2.531,341,3.166,342,2.531,343,1.58,344,1.58,345,1.58,346,4.019,347,1.58,348,1.58,349,1.58,350,2.531,351,1.58,352,2.531,353,1.58,354,2.531,355,2.531,356,1.58,357,1.58,358,1.58,359,1.58,360,1.58,361,3.621,362,1.58,363,1.58,364,3.166,365,1.58,366,2.531,367,1.301,368,1.301,369,1.301,370,3.621,371,1.58,372,1.58,373,1.117,374,1.117,375,1.117,376,1.58,377,1.58,378,1.58,379,1.58,380,1.58,381,1.58,382,1.58,383,1.58,384,1.58,385,1.58,386,1.58,387,1.58,388,1.58,389,1.58,390,1.58,391,1.58,392,1.58,393,1.58,394,1.58]],["title/modules/UsersModule.html",[18,0.98,32,1.329]],["body/modules/UsersModule.html",[2,1.472,3,0.392,4,0.337,5,0.337,7,0.65,8,0.039,9,0.719,12,0.392,13,0.019,16,0.026,17,0.026,18,1.512,20,1.328,21,1.328,22,1.65,23,1.65,24,1.328,25,2.548,26,2.548,30,2.007,32,2.429,33,2.243,34,1.65,35,1.477,37,1.858,66,2.526,69,2.467,70,2.467,71,2.467,78,2.325,254,2.467,337,2.467,338,2.869,369,2.467,373,2.119,374,2.119,375,2.119,395,2.467,396,2.467,397,2.467,398,2.997,399,2.997,400,2.997,401,2.997,402,2.997,403,2.997,404,2.997]],["title/injectables/UsersService.html",[42,1.083,78,1.199]],["body/injectables/UsersService.html",[3,0.316,4,0.272,5,0.272,7,0.539,8,0.039,9,0.579,12,0.316,13,0.016,15,1.07,16,0.023,17,0.023,42,1.265,43,1.329,45,0.519,46,1.725,48,1.216,50,1.725,51,1.732,52,1.725,59,2.285,66,1.497,73,2.751,74,1.988,76,2.474,78,1.4,80,2.267,81,2.267,82,1.216,83,1.646,88,1.329,90,3.192,91,1.988,93,1.988,95,1.988,96,1.707,140,2.552,226,2.882,243,2.751,255,2.751,257,1.329,270,1.707,330,3.39,346,3.39,367,1.988,368,1.988,373,1.707,374,1.707,375,1.707,405,1.988,406,3.501,407,2.415,408,2.415,409,2.415,410,2.415,411,3.501,412,2.415,413,3.501,414,2.415,415,2.415,416,2.415,417,2.415,418,2.415,419,3.501,420,3.501]],["title/coverage.html",[421,2.88]],["body/coverage.html",[0,1.749,1,1.747,5,0.317,6,2.321,8,0.038,10,1.389,13,0.034,16,0.025,17,0.025,24,1.249,42,1.749,44,2.321,55,1.747,56,2.321,59,1.249,72,2.321,78,1.127,82,0.832,101,1.552,103,2.761,104,2.761,126,1.747,139,1.249,196,1.993,219,2.321,223,1.552,224,2.321,225,2.761,255,1.552,256,2.321,257,1.552,258,2.321,262,1.747,263,2.321,271,1.747,272,2.321,277,1.747,278,2.321,285,1.993,306,1.389,329,2.321,338,1.747,339,2.321,405,2.321,421,1.993,422,2.321,423,2.819,424,2.819,425,5.868,426,4.839,427,4.482,428,4.839,429,2.321,430,2.819,431,3.906,432,2.819,433,2.819,434,2.819,435,2.819]],["title/dependencies.html",[21,1.596,436,2.068]],["body/dependencies.html",[8,0.039,9,0.923,13,0.031,16,0.031,17,0.031,21,1.706,192,1.896,198,2.721,201,2.119,274,3.169,275,3.169,437,3.849,438,3.849,439,5.223,440,3.849,441,3.849,442,3.849,443,3.849,444,3.849,445,3.849,446,3.849,447,3.849,448,3.849,449,3.849,450,3.849,451,3.849]],["title/miscellaneous/enumerations.html",[452,1.557,453,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,45,0.799,109,3.862,139,2.079,140,2.908,145,3.862,168,3.862,169,3.862,170,3.862,218,4.128,452,2.304,453,3.06,454,3.717,455,3.717,456,3.717,457,4.691,458,3.717,459,4.691,460,4.691]],["title/miscellaneous/functions.html",[452,1.557,461,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.474,45,0.965,429,3.693,452,2.781,461,3.693,462,4.486]],["title/index.html",[45,0.54,463,2.512,464,2.512]],["body/index.html",[4,0.213,8,0.036,16,0.019,17,0.019,35,2.248,118,2.478,136,0.932,137,1.557,212,4.042,213,1.557,216,1.337,335,2.4,421,1.337,422,2.4,465,1.891,466,1.891,467,3.557,468,2.915,469,1.891,470,1.891,471,1.891,472,1.891,473,2.915,474,3.557,475,1.891,476,1.891,477,3.998,478,1.891,479,4.909,480,1.891,481,4.754,482,1.891,483,1.891,484,1.891,485,2.915,486,1.891,487,2.915,488,1.891,489,3.557,490,1.891,491,1.891,492,1.891,493,1.891,494,1.891,495,1.891,496,3.998,497,4.562,498,2.915,499,1.891,500,1.891,501,1.891,502,1.891,503,4.562,504,2.915,505,3.998,506,1.891,507,2.915,508,1.891,509,1.891,510,2.915,511,4.318,512,3.998,513,1.891,514,2.915,515,1.891,516,1.891,517,1.891,518,1.891,519,3.998,520,1.891,521,1.891,522,1.891,523,1.891,524,1.891,525,2.915,526,1.891,527,1.891,528,1.891,529,1.891,530,1.891,531,2.915,532,1.891,533,1.891,534,1.891,535,2.915,536,1.891,537,1.891,538,3.291,539,2.915,540,1.891,541,1.891,542,1.891,543,1.891,544,1.891,545,1.891,546,1.891,547,1.891,548,2.915,549,1.891,550,1.891,551,1.891,552,1.891,553,3.557,554,1.891,555,1.891,556,1.891,557,1.891,558,1.891,559,1.891,560,2.915,561,1.891,562,1.891,563,1.891,564,1.891,565,1.891,566,2.915,567,1.891,568,1.891,569,1.891,570,2.915,571,2.915,572,1.891,573,1.891,574,1.891,575,1.891,576,1.891,577,1.891,578,1.891,579,1.891,580,1.891,581,1.891,582,1.891,583,1.557,584,1.891,585,1.891,586,1.891,587,1.891,588,1.891,589,1.891,590,1.557]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.583,20,1.846,30,2.053,31,2.293,32,1.846,538,4.626,591,5.619,592,5.619,593,5.619]],["title/overview.html",[594,3.355]],["body/overview.html",[2,1.087,8,0.038,10,2.285,16,0.026,17,0.026,18,0.983,19,3.547,20,1.334,21,1.334,22,1.656,23,1.656,24,1.334,25,1.656,26,1.656,27,2.477,28,2.477,29,2.477,30,2.643,31,3.02,32,2.431,33,2.249,34,1.656,35,1.482,43,1.656,59,2.431,62,2.477,63,2.477,64,2.477,78,2.194,102,1.334,306,2.285,324,2.477,326,2.477,395,2.477,396,2.477,397,2.477,594,2.477,595,4.638,596,3.009]],["title/properties.html",[105,1.596,436,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,105,1.954,136,2.172,583,3.629,590,3.629,597,4.408,598,4.408,599,4.408]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":598,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.23",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["10})@apiquery({name",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["16t07:46:32+0000",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@apiquery({name",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@apiresponse({status",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@isint()@isnotempty",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["2",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{},"modules/UsersModule.html":{}}}],["2.1.0",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["200",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["4",{"_index":595,"title":{},"body":{"overview.html":{}}}],["6",{"_index":596,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["action",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["adds",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["alice",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":526,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":576,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":497,"title":{},"body":{"index.html":{}}}],["applications",{"_index":473,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":583,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["avoid",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["aws",{"_index":514,"title":{},"body":{"index.html":{}}}],["backers",{"_index":577,"title":{},"body":{"index.html":{}}}],["based",{"_index":509,"title":{},"body":{"index.html":{}}}],["board",{"_index":569,"title":{},"body":{"index.html":{}}}],["body",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":593,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":591,"title":{},"body":{"modules.html":{}}}],["building",{"_index":468,"title":{},"body":{"index.html":{}}}],["channel",{"_index":541,"title":{},"body":{"index.html":{}}}],["character",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":503,"title":{},"body":{"index.html":{}}}],["circular",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":525,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":508,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":324,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":325,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":326,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":395,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":396,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":397,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":532,"title":{},"body":{"index.html":{}}}],["compare",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["compodoc/compodoc",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["console.log('createpostdto",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log('patchbodydto",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log('query",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(createuserdto",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":547,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":421,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":101,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":126,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body(new",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":223,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["d",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":543,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":496,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":513,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":504,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":524,"title":{},"body":{"index.html":{}}}],["description",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":482,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":555,"title":{},"body":{"index.html":{}}}],["discord",{"_index":540,"title":{},"body":{"index.html":{}}}],["dive",{"_index":542,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":422,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e",{"_index":400,"title":{},"body":{"modules/UsersModule.html":{}}}],["e2e",{"_index":491,"title":{},"body":{"index.html":{}}}],["each",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":469,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":502,"title":{},"body":{"index.html":{}}}],["eight",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":500,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":559,"title":{},"body":{"index.html":{}}}],["enum",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":453,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/statusstatus.enum",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":545,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exported",{"_index":404,"title":{},"body":{"modules/UsersModule.html":{}}}],["exporting",{"_index":401,"title":{},"body":{"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":264,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":517,"title":{},"body":{"index.html":{}}}],["featured",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":528,"title":{},"body":{"index.html":{}}}],["few",{"_index":519,"title":{},"body":{"index.html":{}}}],["ffirstname",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["firstname",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":527,"title":{},"body":{"index.html":{}}}],["follow",{"_index":563,"title":{},"body":{"index.html":{}}}],["format",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":467,"title":{},"body":{"index.html":{}}}],["full",{"_index":558,"title":{},"body":{"index.html":{}}}],["function",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":461,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":522,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:id",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:id}')@apioperation({summary",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:userid",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":463,"title":{"index.html":{}},"body":{}}],["getuser(@param",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":255,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":550,"title":{},"body":{"index.html":{}}}],["grow",{"_index":573,"title":{},"body":{"index.html":{}}}],["hands",{"_index":544,"title":{},"body":{"index.html":{}}}],["handy",{"_index":533,"title":{},"body":{"index.html":{}}}],["headers",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":548,"title":{},"body":{"index.html":{}}}],["here",{"_index":581,"title":{},"body":{"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":587,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":506,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":530,"title":{},"body":{"index.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injection",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":521,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":480,"title":{},"body":{"index.html":{}}}],["interact",{"_index":551,"title":{},"body":{"index.html":{}}}],["ip",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":261,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":259,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":220,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":566,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":568,"title":{},"body":{"index.html":{}}}],["john",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":579,"title":{},"body":{"index.html":{}}}],["json",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":584,"title":{},"body":{"index.html":{}}}],["key",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":536,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":590,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":571,"title":{},"body":{"index.html":{}}}],["limit",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":565,"title":{},"body":{"index.html":{}}}],["login",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":507,"title":{},"body":{"index.html":{}}}],["loop",{"_index":561,"title":{},"body":{"index.html":{}}}],["makes",{"_index":515,"title":{},"body":{"index.html":{}}}],["managing",{"_index":529,"title":{},"body":{"index.html":{}}}],["matches",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":511,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":452,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":570,"title":{},"body":{"index.html":{}}}],["mode",{"_index":485,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":505,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":585,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":556,"title":{},"body":{"index.html":{}}}],["nest",{"_index":474,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":589,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":274,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":523,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":466,"title":{},"body":{"index.html":{}}}],["npm",{"_index":479,"title":{},"body":{"index.html":{}}}],["number",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":567,"title":{},"body":{"index.html":{}}}],["official",{"_index":512,"title":{},"body":{"index.html":{}}}],["one",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":572,"title":{},"body":{"index.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":219,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":221,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":222,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":594,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":436,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@apiquery({name",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":258,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:8",{"_index":260,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.id",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":557,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":265,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":273,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchbodydto",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":262,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":271,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["person",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["platform",{"_index":510,"title":{},"body":{"index.html":{}}}],["please",{"_index":539,"title":{},"body":{"index.html":{}}}],["possible",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isenum(poststatus)@isnotempty",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isenum(posttype)@isnotempty",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:102",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:127",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:84",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":328,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":277,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":306,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":487,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":465,"title":{},"body":{"index.html":{}}}],["project",{"_index":477,"title":{},"body":{"index.html":{}}}],["properties",{"_index":105,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/users.service",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":537,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":580,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":495,"title":{},"body":{"index.html":{}}}],["real",{"_index":552,"title":{},"body":{"index.html":{}}}],["record",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["reflect",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":476,"title":{},"body":{"index.html":{}}}],["required",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":518,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":531,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["review\",\"published",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["run",{"_index":481,"title":{},"body":{"index.html":{}}}],["runs",{"_index":501,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":470,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":471,"title":{},"body":{"index.html":{}}}],["service",{"_index":402,"title":{},"body":{"modules/UsersModule.html":{}}}],["services",{"_index":403,"title":{},"body":{"modules/UsersModule.html":{}}}],["services/posts.service",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["setup",{"_index":478,"title":{},"body":{"index.html":{}}}],["side",{"_index":472,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":520,"title":{},"body":{"index.html":{}}}],["slug",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["snippet",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":575,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":462,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../statusstatus.enum.ts",{"_index":454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":399,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":429,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":263,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/statusstatus.enum.ts",{"_index":456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":327,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/services/posts.service.ts",{"_index":329,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/services/posts.service.ts:5",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/services/posts.service.ts:8",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":272,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:8",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:58",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:81",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UsersModule.html":{}}}],["start",{"_index":483,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":486,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":488,"title":{},"body":{"index.html":{}}}],["started",{"_index":464,"title":{"index.html":{}},"body":{}}],["starter",{"_index":475,"title":{},"body":{"index.html":{}}}],["statements",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":560,"title":{},"body":{"index.html":{}}}],["step",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["steps",{"_index":498,"title":{},"body":{"index.html":{}}}],["story",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["story\",\"series",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["straightforward",{"_index":516,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":538,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":592,"title":{},"body":{"modules.html":{}}}],["table",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":499,"title":{},"body":{"index.html":{}}}],["test",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":493,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":492,"title":{},"body":{"index.html":{}}}],["tests",{"_index":489,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":574,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":334,"title":{},"body":{"injectables/PostsService.html":{}}}],["tile",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":553,"title":{},"body":{"index.html":{}}}],["title",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":582,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":588,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":275,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":490,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":599,"title":{},"body":{"properties.html":{}}}],["update",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated.'})@patch",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchbodydto",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":562,"title":{},"body":{"index.html":{}}}],["url",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url'})@isstring()@isnotempty()@matches(/^[a",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["user.dto",{"_index":276,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":398,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":338,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":78,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":554,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":597,"title":{},"body":{"properties.html":{}}}],["video",{"_index":546,"title":{},"body":{"index.html":{}}}],["visit",{"_index":535,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":549,"title":{},"body":{"index.html":{}}}],["void",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":484,"title":{},"body":{"index.html":{}}}],["wdfdwgwe",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":586,"title":{},"body":{"index.html":{}}}],["without",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":534,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":564,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":578,"title":{},"body":{"index.html":{}}}],["you're",{"_index":494,"title":{},"body":{"index.html":{}}}],["z0",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)], // to avoid circular dependency\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService)) // because module imported with forwardRef\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById(id);\n\n    return 'WDFDWGWE';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content', example: 'This is the content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image URL', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values are \"post\", \"page\", \"story\",\"series\"', example: 'post'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Date when the post will be published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content in JSON format', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'for example \"my-url\"', example: 'my-url'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values are \"draft\", \"scheduled\", \"review\",\"published\"', example: 'post'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title', example: 'My first post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/statusStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is the title',\n    example: 'My first post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'Possible values are \"post\", \"page\", \"story\",\"series\"',\n    example: 'post',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: 'for example \"my-url\"',\n    example: 'my-url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description:\n      'Possible values are \"draft\", \"scheduled\", \"review\",\"published\"',\n    example: 'post',\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content',\n    example: 'This is the content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the content in JSON format',\n    example:\n      '{\\r\\n    \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n    \\\"@type\\\": \\\"Person\\\"\\r\\n  }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image URL',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'Date when the post will be published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags',\n    example: ['nestJS', 'typescript'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'Meta key',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Meta value',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsString,\n  IsNotEmpty,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n// Compare this snippet from src/users/users.module.ts:\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-Users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-Users-param.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class GetUsersParamDto {\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the post', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'This is the id of the post',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'The record has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:userId}')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchBodyDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a post'})@ApiResponse({status: 20, description: 'The record has been successfully updated.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchBodyDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './services/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@ApiTags('Posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('{/:userId}') // optional\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'The record has been successfully created.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log('createPostDto', createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Update a post',\n  })\n  @ApiResponse({\n    status: 20,\n    description: 'The record has been successfully updated.',\n  })\n  @Patch()\n  public updatePost(@Body() patchBodyDto: PatchPostDto) {\n    console.log('patchBodyDto', patchBodyDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './services/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/services/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/services/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/services/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n\n    return [\n      {\n        users: user,\n        title: 'Test Tile',\n        content: 'Test Content',\n      },\n      {\n        users: user,\n        title: 'Test Tile 2',\n        content: 'Test Content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:id}')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional id, limit and page'})@ApiQuery({name: 'id', type: 'number', required: false, description: 'Get user by id', example: 1})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Limit the number of users returned', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Page you want to return', example: 1})@ApiResponse({status: 200, description: 'Users found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Put,\n  Post,\n  Patch,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-Users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {} // D. Injection Step 3\n\n  @Get('{/:id}')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional id, limit and page',\n  })\n  @ApiQuery({\n    name: 'id',\n    type: 'number',\n    required: false,\n    description: 'Get user by id',\n    example: 1,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Limit the number of users returned',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Page you want to return',\n    example: 1,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users found',\n  })\n  public getUsers(\n    @Param('id') getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe)\n    limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe)\n    page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  // @Get('/:id')\n  // public getUser(@Param() params: any, @Query() query: any) {\n  //   console.log('Query:', query);\n  //   return 'User for id ' + params.id;\n  // }\n\n  @Post()\n  public createUser(@Body(new ValidationPipe()) createUserDto: CreateUserDto) {\n    console.log(createUserDto);\n    return 'This action adds a new user';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService], // D. Injection Step 2\n  exports: [UsersService], // E. Exporting the service, only services can be exported\n  imports: [forwardRef(() => AuthModule)], // to avoid circular dependency\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { ffirstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-Users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n// D. Injection Step 1\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  public findOneById(id: string) {\n    return {\n      ffirstName: 'Alice',\n      email: 'alice@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/services/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-Users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../statusStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/statusStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
